import numpy as np
import matplotlib.pyplot as plt

# Provided data
res_solomon_running = [
    [(100, 0.004053300013765693), (1000, 0.039973100007046014), (10000, 0.3836838999995962), (100000, 3.8912096000276506), (1000000, 39.22541289997753)],
    [(100, 0.049120299983769655), (1000, 0.09109689999604598), (10000, 0.4472113999654539), (100000, 4.0749714999692515), (1000000, 39.78295470000012)],
    [(100, 0.04768700001295656), (1000, 0.08145300002070144), (10000, 0.41994419996626675), (100000, 3.966898599988781), (1000000, 39.3001510000322)],
    [(100, 0.05420300003606826), (1000, 0.0850751000107266), (10000, 0.5334346999879926), (100000, 4.0175275999936275), (1000000, 41.81850069999928)]
]

res_solomon_init = [
    [(100, 0.049157399975229055), (1000, 0.08426720002898946), (10000, 0.4585932999616489), (100000, 4.008094599994365), (1000000, 39.46711100003449)]
]

res_hashes_run = [
    [(100, 4.00003045797348e-06), (1000, 3.789999755099416e-05), (10000, 0.0006503000040538609), (100000, 0.017202100018039346), (1000000, 0.3029672000557184)],
    [(100, 4.099973011761904e-06), (1000, 5.200004670768976e-05), (10000, 0.000793200044427067), (100000, 0.018224900006316602), (1000000, 0.3199924999498762)],
    [(100, 4.399975296109915e-06), (1000, 4.8900023102760315e-05), (10000, 0.0008880000095814466), (100000, 0.02776809997158125), (1000000, 0.3258073999895714)]
]

res_hashes_init = [
    [(100, 0.0001585999852977693), (1000, 0.00136009999550879), (10000, 0.01238759997067973), (100000, 0.12567869998747483), (1000000, 1.2720321000088006)],
    [(100, 0.00016630004392936826), (1000, 0.0012656999751925468), (10000, 0.012622000009287149), (100000, 0.1395576000213623), (1000000, 1.2894529000041075)],
    [(100, 0.00015899998834356666), (1000, 0.0013244000147096813), (10000, 0.01273429999127984), (100000, 0.12562900001648813), (1000000, 1.2969998000189662)]
]

res_merkle_run = [
    [(100, 0.013793399964924902), (1000, 1.36929289996624), (10000, 137.71045889996458)],
    [(100, 0.01419069996336475), (1000, 1.5283730999799445), (10000, 143.46644609997747)]
]

res_merkle_init = [
    [(100, 0.0002940000267699361), (1000, 0.0026000000070780516), (10000, 0.025366200017742813), (100000, 0.26061250001657754), (1000000, 2.6568700000061654)],
    [(100, 0.00029689999064430594), (1000, 0.0025501999771222472), (10000, 0.025210299994796515), (100000, 0.26240189996315166), (1000000, 2.808496199955698)],
    [(100, 0.00030290003633126616), (1000, 0.0025858000153675675), (10000, 0.025457700015977025), (100000, 0.2544767999788746), (1000000, 2.6222008000477217)]
]

res_aes_run = [
    [(100, 0.0011242000036872923), (1000, 0.009999100002460182), (10000, 0.0991691000526771), (100000, 1.0007045000093058), (1000000, 9.847072699980345)],
    [(100, 0.0010540999937802553), (1000, 0.009573400020599365), (10000, 0.0992030999623239), (100000, 1.2060535000055097), (1000000, 9.972772600012831)],
    [(100, 0.0010862000053748488), (1000, 0.010096599988173693), (10000, 0.0973315000301227), (100000, 0.985398399992846), (1000000, 10.322601800027769)]
]

res_aes_init = [
    [(100, 0.002593300014268607), (1000, 0.011284300009720027), (10000, 0.11156140000093728), (100000, 1.1147516999626532), (1000000, 10.887531400017906)],
    [(100, 0.0025334000238217413), (1000, 0.011003100022207946), (10000, 0.10800269996980205), (100000, 1.1479433000204153), (1000000, 10.873614000040106)],
    [(100, 0.0026087999576702714), (1000, 0.010960199986584485), (10000, 0.1033544999663718), (100000, 1.078952300013043), (1000000, 10.533376800012775)]
]

res_conv_init = [
    [(100, 0.8755283000064082), (1000, 8.892191500010085), (10000, 89.77438059999258)],
    [(100, 0.9795645999984117), (1000, 9.17676040000515), (10000, 91.36570930000744)]
]  # the same as running because its the similar process
res_conv_run = [
    [(100, 0.8755283000064082), (1000, 8.892191500010085), (10000, 89.77438059999258)],
    [(100, 0.9795645999984117), (1000, 9.17676040000515), (10000, 91.36570930000744)]
]

# Function to calculate average times over multiple runs
def calculate_average(data):
    averaged = {}
    for run in data:
        for files, time in run:
            if files not in averaged:
                averaged[files] = []
            averaged[files].append(time)
    return {files: np.mean(times) for files, times in averaged.items()}

# Data preparation
data = {
    "Reed-Solomon (Init)": calculate_average(res_solomon_init),
    "Reed-Solomon (Run)": calculate_average(res_solomon_running),
    "Hashes (Init)": calculate_average(res_hashes_init),
    "Hashes (Run)": calculate_average(res_hashes_run),
    "Merkle (Init)": calculate_average(res_merkle_init),
    "Merkle (Run)": calculate_average(res_merkle_run),
    "AES (Init)": calculate_average(res_aes_init),
    "AES (Run)": calculate_average(res_aes_run),
    "Convolution (Run)": calculate_average(res_conv_run),
    "Convolution (Init)": calculate_average(res_conv_init)
}

# Legend labels
legend_labels = {
    "Reed-Solomon (Init)": "Reed-Solomon (Init, 1 run)",
    "Reed-Solomon (Run)": "Reed-Solomon (Run, 4 runs)",
    "Hashes (Init)": "Hashes (Init, 3 runs)",
    "Hashes (Run)": "Hashes (Run, 3 runs)",
    "Merkle (Init)": "Merkle (Init, 3 runs)",
    "Merkle (Run)": "Merkle (Run, 2 runs)",
    "AES (Init)": "AES (Init, 3 runs)",
    "AES (Run)": "AES (Run, 3 runs)",
    "Convolution (Run)": "Convolution run 2 times",
    "Convolution (Init)": "Convolutioin init 2 times"
}

fig, ax = plt.subplots(2, 1, figsize=(12, 12), sharex=True)

for label, averages in data.items():
    if "Init" in label:
        ax[0].plot(averages.keys(), averages.values(), label=label, marker='o')


ax[0].set_title('Initialization Times for File Encryption Methods')
ax[0].set_ylabel('Time (seconds)')
ax[0].legend()
ax[0].grid(True)

for label, averages in data.items():
    if "Run" in label:
        ax[1].plot(averages.keys(), averages.values(), label=label, marker='o')

ax[1].set_title('Running Times for File Encryption Methods')
ax[1].set_xlabel('Number of Files')
ax[1].set_ylabel('Time (seconds)')
ax[1].legend()
ax[1].grid(True)


plt.tight_layout()
plt.show()